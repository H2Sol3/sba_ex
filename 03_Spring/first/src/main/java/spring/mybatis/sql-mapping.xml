<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="member">
	<!-- sql정의 -->
	<select id="memberlist" resultType="MemberDTO"><!-- 자바코드에서는 저 id가 필요함 -->
		<!-- resultType: 한개의 레코드 타입(?) -->
		select * from member
	</select>

	<select id="membercount" resultType="int">
		select count(*) from member
	</select>

	<!-- return되는 값의 타입은 String타입이야 -->
	<!-- session.selectOne("oneMember","홍길동") -->
	<select id="onemember" resultType="MemberDTO"
		parameterType="String">
		select * from member where id=#{id}<!-- #{변수명} -->
	</select>

	<!-- 가입일이 빠른 사람부터 출력 -->
	<select id="paginglist" resultType="MemberDTO">
		select * from member order by indate desc limit
		<foreach collection="array" item="num" separator=","> <!-- (array,list) 배열을 받아서 ,로 구분해주고 값들을 num이라고 하자 -->
			#{num}
		</foreach>
	</select>

	<insert id="insertmember" parameterType="memberdto">
		insert into member
		values(#{id}, #{pw}, #{name}, #{phone}, #{email},
		#{address}, now())
	</insert>

	<update id="updatemember" parameterType="memberdto">
		update member set
		name=#{name}, email=#{email}, phone=#{phone} where
		id=#{id}
	</update>

	<update id="updatemember2" parameterType="memberdto">
		update member set
		name=#{name}, email=#{email}, phone=#{phone}, address=#{address}, pw=#{pw} where
		id=#{id}
	</update>


	<delete id="deletemember" parameterType="String">
		delete from member where
		id=#{id}
	</delete>

	<select id="searchmember" resultType="memberdto"
		parameterType="hashmap">
		select * from member where ${colname} like #{colvalue}
	</select>

	<select id="addresssearch" resultType="memberdto">
		select * from member where address in
		<foreach open="(" close=")" separator="," collection="list"
			item="addr">
			#{addr}
		</foreach>
	</select>

	<sql id="a">
		select*from member
	</sql>

	<select id="combination" resultType="memberdto"
		parameterType="memberdto">
		<include refid="a" />
		<where>
			<choose>
				<when
					test="name != null and name != '' and email != null and email != ''">
					name=#{name} and email=#{email}
				</when>
				<when test="name != null and name != ''">
					name=#{name}
				</when>
				<when test="email != null and email != ''">
					email=#{email}
				</when>
			</choose>
		</where>
	</select>







	<!-- <select id="test" resultMap="dtomap"> -->
	<!-- select a.id, b.title, b.age -->
	<!-- from a join b on a.id=b.name -->
	<!-- </select> -->
	<!-- List<HashMap<String,String> list = session.selectList("test"); -->

	<resultMap type="HashMap" id="memberboardmap">
		<result property="id" column="id" />
		<result property="name" column="name" />
		<result property="title" column="title" />
		<result property="timee" column="time" />
	</resultMap>

	<select id="memberboard" resultMap="memberboardmap"
		parameterType="String">
		SELECT id,NAME,ifnull(title,'글없음') AS title ,ifnull(writingtime,'시각 모름') AS
		time
		FROM member m left outer JOIN board b
		ON m.id=b.writer
		WHERE id=#{id}
	</select>



	<delete id="deleteBoard" parameterType="String">
		delete from board
		where writer=#{id}
	</delete>














</mapper>
  